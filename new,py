import streamlit as st
from reportlab.pdfgen import canvas
import requests
from bs4 import BeautifulSoup
import builtwith
import dns.resolver
import socket
import ssl
import re

class WebsiteScannerApp:
    def __init__(self):
        self.results = {}

    def scan_website(self, target_url):
        # Your existing scanning logic here
        def perform_scan(url):
          results = {}

    common_directories = [
        "/",
        "/admin",
        "/login",
        "/wp-admin",
        "/uploads",
        "/backup",
        "/config",
        "/js",
        "/css",
    ]

    directory_results = {}
    for directory in common_directories:
         response = check_directory(url, directory)
         directory_results[directory] = response.status_code if response else "Failed"

    results["Directories"] = directory_results
    subdomains = get_subdomains(url)
    results["Subdomains"] = subdomains
    server_headers = get_server_headers(url)
    results["Server Headers"] = server_headers
    tech_info = get_technologies(url)
    results["Web Technologies"] = tech_info
    ssl_info = get_ssl_certificate(url)
    results["SSL Certificate Information"] = ssl_info

    # Adding XSS and CSRF checks
    xss_result = check_xss_vulnerability(url)
    results["XSS Vulnerability"] = xss_result

    csrf_result = check_csrf_vulnerability(url)
    results["CSRF Vulnerability"] = csrf_result

    # Adding SQL injection check
    sql_result = sql_injection_scan(url)
    results["SQL Injection Vulnerability"] = sql_result

    return results

def check_xss_vulnerability(url):
    try:
        response = requests.get(url)
        if '<script>' in response.text:
            return "Potential XSS Vulnerability"
        else:
            return "No XSS Vulnerability"
    except requests.RequestException:
        return "Error checking XSS vulnerability"

def check_csrf_vulnerability(url):
    try:
        response = requests.get(url)
        csrf_patterns = ["<input type=\"hidden\" name=\"csrf_token\" value=", "csrf_token="]
        if any(pattern in response.text for pattern in csrf_patterns):
            return "Potential CSRF Vulnerability"
        else:
            return "No CSRF Vulnerability"
    except requests.RequestException:
        return "Error checking CSRF vulnerability"

def sql_injection_scan(url):
    s = requests.Session()
    s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"

    forms = get_forms(url)
    result = f"[+] Detected {len(forms)} forms on {url}.\n"

    for form in forms:
        details = form_details(form)

        for i in "\"'":
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    data[input_tag['name']] = input_tag["value"] + i
                elif input_tag["type"] != "submit":
                    data[input_tag['name']] = f"test{i}"

            result += f"{url}\n"
            result += f"Form Details: {details}\n"

            if details["method"] == "post":
                res = s.post(url, data=data)
            elif details["method"] == "get":
                res = s.get(url, params=data)
            if vulnerable(res):
                result += "SQL injection attack vulnerability detected.\n"
            else:
                result += "No SQL injection attack vulnerability detected.\n"
                break

    return result

def vulnerable(response):
    errors = {"quoted string not properly terminated",
              "unclosed quotation mark after the character string",
              "you have an error in your SQL syntax"
              }
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

def get_forms(url):
    soup = BeautifulSoup(requests.get(url).content, "html.parser")
    return soup.find_all("form")

def form_details(form):
    details_of_form = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({
            "type": input_type,
            "name": input_name,
            "value": input_value,
        })

    details_of_form['action'] = action
    details_of_form['method'] = method
    details_of_form['inputs'] = inputs
    return details_of_form

def check_directory(url, directory):
    try:
        response = requests.get(url + directory)
        return response
    except requests.ConnectionError:
        return None

def get_subdomains(domain):
    try:
        answers = dns.resolver.resolve(domain, 'A')
        subdomains = [str(answer) for answer in answers]
        return subdomains
    except dns.resolver.NXDOMAIN:
        return []

def get_server_headers(url):
    try:
        response = requests.head(url)
        return response.headers
    except requests.ConnectionError:
        return None

def get_technologies(url):
    try:
        info = builtwith.builtwith(url)
        return info
    except builtwith.BuiltWithError:
        return None

def get_ssl_certificate(url):
    try:
        hostname = url.split('//')[1].split('/')[0]
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert_info = ssock.getpeercert()
                return cert_info
    except (socket.error, ssl.SSLError):
        return None

def display_results(results):
    for category, data in results.items():
        st.subheader(f"{category}:")
        if isinstance(data, dict):
            for key, value in data.items():
                st.text(f"  - {key}: {value}")
        elif isinstance(data, list):
            for item in data:
                st.text(f"  - {item}")
        else:
            st.text(f"  - {data}")
        st.text("")  # Empty line for spacing

if __name__ == "__main__":
    main()

        # Replace this with your actual scanning logic
        self.results = {"Directories": {"example_dir": 200}, "Subdomains": ["sub1", "sub2"], "Server Headers": {"Server": "Apache"}}

    def generate_pdf_report(self):
        pdf_filename = "scan_report.pdf"
        with canvas.Canvas(pdf_filename) as pdf:
            pdf.setFont("Helvetica-Bold", 16)
            pdf.drawString(100, 750, "Website Scan Report")
            pdf.setFont("Helvetica", 12)

            for category, data in self.results.items():
                pdf.drawString(100, pdf._y - 20, f"\n{category}:")
                if isinstance(data, dict):
                    for key, value in data.items():
                        pdf.drawString(120, pdf._y - 15, f"- {key}: {value}")
                elif isinstance(data, list):
                    for item in data:
                        pdf.drawString(120, pdf._y - 15, f"- {item}")
                else:
                    pdf.drawString(120, pdf._y - 15, f"- {data}")

        return pdf_filename

app = WebsiteScannerApp()

def main():
    st.title("Web Scanning Tool")
    st.sidebar.header("Options")

    url = st.text_input("Enter the target URL:")
    scan_button = st.button("Scan Website")

    if scan_button:
        if not is_valid_url(url):
            st.error("Invalid URL. Please enter a valid URL.")
        else:
            app.scan_website(url)
            st.success("Scan completed successfully!")
            display_results(app.results)

def is_valid_url(url):
    try:
        response = requests.head(url)
        return response.status_code == 200
    except requests.RequestException:
        return False

def display_results(results):
    st.title("Scan Results:")
    for category, data in results.items():
        st.subheader(category)
        if isinstance(data, dict):
            for key, value in data.items():
                st.write(f"  - {key}: {value}")
        elif isinstance(data, list):
            for item in data:
                st.write(f"  - {item}")
        else:
            st.write(f"  - {data}")

    # Add a button to download the PDF report
    if st.button("Download PDF Report"):
        pdf_filename = app.generate_pdf_report()
        st.markdown(f"Download your [PDF report]({pdf_filename}).")

if __name__ == "__main__":
    main()
